
Since this is just an abstract representation, needs actual physical drive -
local storage, nfs server, cloud.  Who makes it available. Kubernetes doesn't care. PV
is your interface.

Think of storage as external plugin (whether local, remote or cloud).
PV's are not namespaced. Available to whole cluster.

Local vs Remote volume types.
Local violates initial intro.  DB should always be remote/cloud.


Persistent Volume Claim:
application has to claim the PV with a PVC (yaml).
use pvc in pod configuration.
pod request the claim --> claim tries to find vol in cluster --> vol has actual
storage.
Claims must exist in the same namespace of the pod using the claim.
Vol is mounted into the container.


Note: ConfigMap cm and Secret are considered local volumes but not created via
PV and PVC.
Note: Pod can use multiple diff vol types at the same time.

Storage Class:
provisions pv's dynamically ... when pvc's claim it.
also gets created using yaml.
StorageBackend is defined in the SC component.
- via "provisioner" attribute
- each storage backend has own provisioner
- internal provisioner - kubernetes.io
- external provisioner

